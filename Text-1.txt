Extensions
Nicolas Barone(njb227)
Jineet Patel(jp257)



1. greater Aim
in this extension we allowed the user to be able to reverse both the x and y
velocities of the ball if he hits 1/4 of the top of the brick on the edges.
We did this checking first if there was a collision, then by making a conditional
that if one of the balls bottoms points was in contact with that edge we would
negate both the x and y velocities of the ball.


2. Visual countdown
We made a visual counting down from 3 to 2 to 1 every time the game enters state
countdown which occurs when the user starts and looses a life. We did this by checking
if the state was in STATE_COUNTDOWN and if so every time a second goes by(60 frames)
then we display a GLabel appropriate.(3 = 60 frames, 2 = 120 frames, 1 = 180 frames)


3. Up and down movement
We wanted to have the user have greater control over the paddle and we did this by
allowing the user to move up to 1/4 the GAME_HEIGHT in an up direction. We did
this by checking the user was pressing the up and down keys by using the method
of is_key_down of the GObject and if so negatively incrementing the y position
if it was down and positively incrementing it if it was up. We set restrictions
of how far the paddle could go by using a mix function between the paddle's
position and GAME_HEIGHT/4 and assigning it to the paddle's y position and did a
max function between the paddle's position and PADDLE_OFFSET and assigning it
to the paddle's x position.

4. Text on screen based on # of bricks left 
In this extension we allowed the game to display various messages as the game went
on. When these messages popped up on the screen was usually decided by the the
number of bricks that the user was currently at. As the number of bricks go down
(as they keep playing the game and hitting more bricks essentially) different
messages start to pop up. We just made a separate function called messages and
used if/elif statements with get.Bricks to create partitions. We then used
G.Label for the messages. 

5. Removes ball from the visual part of the game when the ball hits the bottom
In this extension, whenever the ball hit the bottom of the screen, we assigned
it to a random location outside of the visual field (-10,-10). We did this with
an if statement for whenever the difference between the Y coordinate of the ball
and the ball's diameter/2 is zero or less than zero. Whenever this is the case,
we simply assigned the ball to that specific location. 

6. sound 
We utilized sound at certain times in the game. Just like with the text
extension, at certain times in the game where the user has certain number of
bricks left we play a sound that the user is able to hear. This changes based
on how many bricks are left and what "partition" of bricks the user is currently
in. Created sound file in Play.py and made a method that is called in breakout.py.
Attribution sound CS 1110 staff.